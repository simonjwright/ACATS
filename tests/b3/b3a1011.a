-- B3A1011.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
--
-- OBJECTIVE:
--
--     Check that the controlling parameter or controlling result cannot be an
--     incomplete view if the call is dynamically tagged.
--
-- TEST DESCRIPTION:
--
--     We are checking 3.10.1(10.1/5). This rule was added by AI12-0155-1.
--     We cannot allow dispatching calls for an incomplete type as that
--     requires reading a component (the tag) of an object whose size and
--     layout is unknown.
--     
--     3.10.1(9.3/2) attempted to prevent this problem, but it's solution does
--     not work within a unit. Since Ada uses a linear elaboration model,
--     having the full declaration occurring later doesn't help. Neither does
--     the fact that any occurrence of this problem will always raise an
--     exception (Program_Error for call-before-body-elaboration). That's
--     because we have a language design principle that if a compiler has to
--     detect a case in order to avoid using non-existent information, then it
--     might as well reject it. See AARM 13.14(1.o-1.u).
--
--     We try these cases both for normal incomplete types and for incomplete
--     type with completions deferred to the body.
--
--     Note that this rule cannot be triggered by an incomplete view that comes
--     from a limited with, as there has to be a primitive function involved,
--     and primitive subprograms are not made visible by a limited with nor can
--     they be declared later.
--
--     Note: We have commented out the OK cases below. That was done as these
--     examples necessarily raise Program_Error and thus are not useful in
--     practice. Requiring compilers to correctly compile useless cases
--     violates the spirit of the ACATS.
--
-- CHANGE HISTORY:
--     28 Mar 2023  RLB  Created test.
--
package B3A1011 is

   type T is tagged; 
   function F1 return access T; 
   function F2 return access T'Class; 
   O1 : access T;
   O2 : access T'Class;
   function G (X : access T) return Integer; 
-- I1 : Integer := G (F1);                                 -- OK. {20}
   I2 : Integer := G (F2);                                 -- ERROR: {20}
-- I3 : Integer := G (O1);                                 -- OK. {20}
   I4 : Integer := G (O2);                                 -- ERROR: {20}
   type T is tagged null record; 

private

   type Def is tagged; 
   function DF1 return access Def; 
   function DF2 return access Def'Class; 
   DO1 : access Def;
   DO2 : access Def'Class;
   function G (X : access Def) return Integer; 
-- DI1 : Integer := G (DF1);                               -- OK. {21}
   DI2 : Integer := G (DF2);                               -- ERROR: {21}
-- DI3 : Integer := G (DO1);                               -- OK. {21}
   DI4 : Integer := G (DO2);                               -- ERROR: {21}

end B3A1011;
