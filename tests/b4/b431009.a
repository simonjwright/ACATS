-- B431009.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--
--*
-- OBJECTIVE:
--      Check that the association in an extension aggregate for a discriminant
--      without a default cannot be given by <>.
--
-- TEST DESCRIPTION:
--      Extension aggregate cases for paragraph 4.3.1(17.1/2). Note that this
--      rule applies to all Ada versions since Amendment 1 for Ada 95.
--
-- CHANGE HISTORY:
--      2022-03-28   RLB     Created test using new test C431004 as a template.
--
--!

procedure B431009 is

   type Units_Type is (Feet, Metres);

   type Tagged_Units_Type is tagged record
      Units_Field : Units_Type := Metres;
   end record;

   -- Example where a discriminant of a numeric type determines the bounds of a
   -- 1-D array in an extension.

   type Integer_Vector_Type is array (Integer range <>) of Integer;

   Max : constant := 100;

   subtype Index is Integer range 0 .. Max;

   type Poly_Units_Type (N : Index) is new Tagged_Units_Type 
      with record
         IV : Integer_Vector_Type (0 .. N);
      end record;

   -- Discriminant explicitly initialised to default:
   Poly_1 : constant Poly_Units_Type := (Units_Field => Metres,
                                         N  => <>,
                                         IV => <>);          -- ERROR: {2:41;1}
                                         
   -- Discriminant explicitly initialised to a specific value:
   Poly_2 :          Poly_Units_Type := (Units_Field => Feet,
                                         N  => 2,
                                         IV => <>);          -- OK. {2:41;1}
                                         
   -- Discriminant explicit initialized to default in extension aggregate:
   Poly_3 : constant Poly_Units_Type := (Tagged_Units_Type with 
                                         N  => <>,
                                         IV => <>);          -- ERROR: {2:41;1}
                                         
   -- Discriminant explicitly initialised to a specific value in 
   -- extension aggregate:
   Poly_4 :          Poly_Units_Type := (Tagged_Units_Type with
                                         N  => 2,
                                         IV => <>);          -- OK. {2:41;1}
                                                
   -- All components defaulted:
   Poly_5 :          Poly_Units_Type := (Tagged_Units_Type with
                                         others => <>);      -- ERROR: {1:41;1}
                                                
   

   -- Example where discriminants of a numeric type determine the bounds of a
   -- matrix.

   subtype Bounds_Type is Integer range 0 .. 100;

   type Matrix_Type is array (Bounds_Type range <>,
                              Bounds_Type range <>) of Float;

   type Matrix_Units_Type (Rows    : Integer;
                           Columns : Integer) is new Tagged_Units_Type
      with record
         Mat : Matrix_Type (1 .. Rows, 1 .. Columns);
      end record;

   Matrix_Rec_1 : constant Matrix_Units_Type :=
                   (Tagged_Units_Type with 
                    Rows    => <>,
                    Columns => <>,
                    Mat     => (others => (others => 0.0))); -- ERROR: {3:20;1}

   Matrix_Rec_2 : constant Matrix_Units_Type :=
                   (Tagged_Units_Type with 
                    Rows    => 5,
                    Columns => <>,
                    Mat     => (others => (others => 0.0))); -- ERROR: {3:20;1}

   Matrix_Rec_3 : constant Matrix_Units_Type :=
                   (Tagged_Units_Type with 
                    Rows    => <>,
                    Columns => 4,
                    Mat     => (others => (others => 0.0))); -- ERROR: {3:20;1}

   Matrix_Rec_4 : constant Matrix_Units_Type :=
                   (Tagged_Units_Type with 
                    Rows    => 3,
                    Columns => 6,
                    Mat     => (others => (others => 0.0))); -- OK. {3:20;1}

   Matrix_Rec_5 : constant Matrix_Units_Type :=
                   (Tagged_Units_Type with others => <>);    -- ERROR: {20;1}

   Matrix_Rec_6 : constant Matrix_Units_Type :=
                   (Tagged_Units_Type with 
                    Rows => 4, others => <>);                -- ERROR: {1:20;1}

   -- Example where a discriminant of an enumeration type selects a variant:

   type Gender_Type is (Male, Female);

   type Poly_Person_Type (N : Index;
                          Gender : Gender_Type) is
      new Poly_Units_Type(N) with record
         Height : Float;
         case Gender is
            when Male =>
               Bearded : Boolean;
            when Female =>
               No_Of_Children : Natural;
         end case;
      end record;

    Person_1 : constant Poly_Person_Type :=
             (Tagged_Units_Type with 
                 N  => <>,
                 IV => <>,
                 Gender => <>,
                 Height => <>,
                 Bearded => <>);                             -- ERROR: {5:14;1}

    Person_2 : constant Poly_Person_Type :=
             (Tagged_Units_Type with others => <>);          -- ERROR: {14;1}

    Person_3 : constant Poly_Person_Type :=
             (Tagged_Units_Type with 
                 N  => <>,
                 IV => <>,
                 Gender => Female, No_of_Children => 0,
                 Height => 5.0);-- ERROR: {5:14;1}

    Person_4 : constant Poly_Person_Type :=
             (Tagged_Units_Type with
                 Gender => Female, others => <>);            -- ERROR: {1:14;1}

    Person_5 : constant Poly_Person_Type :=
             (Poly_Units_Type with 
                 N      => <>,
                 Gender => <>,
                 Height => <>,
                 Bearded => <>);                             -- ERROR: {4:14;1}

    Person_6 : constant Poly_Person_Type :=
             (Poly_Units_Type with others => <>);            -- ERROR: {14;1}

    Person_7 : constant Poly_Person_Type :=
             (Poly_Units_Type with 
                 N      => <>,
                 Gender => Female, No_of_Children => 0,
                 Height => 5.0);                             -- ERROR: {3:14;1}

    Person_8 : constant Poly_Person_Type :=
             (Poly_Units_Type with 
                 N      => 1,
                 Gender => Female, No_of_Children => 0,
                 Height => 5.0);                             -- OK. {3:14;1}

begin

   null;
   
end B431009;
