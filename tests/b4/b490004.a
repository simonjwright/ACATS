-- B490004.A
--
--                                     Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                                DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                                 Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
-- OBJECTIVE:
--      Check that a static expression is illegal if it fails the check of a
--      static predicate, even if the assertion policy is Ignore.
--
-- TEST DESCRIPTION:
--
--      The test checks 4.9(24/3) in the case of static predicates.
--
--      Note that whether an expression is static does not depend on the
--      context of the expression; it only depends on the constructs that make
--      up the expression and their properties.
--
--      Most cases tested here use qualified expressions or type conversions
--      as cases involving static constants with a constrained subtype are
--      legal by AI12-0393-1 (which was confirming existing practice, in
--      particular in the ACATS since 1996 - see the declaration of SubInt1 and
--      SubInt3 in B490001). AI12-0393-1 asks that the ACATS not test whether
--      such a constant is static. Thus we only test cases where the static
--      value of the constant would be illegal if treated as static and a
--      static expression is required (so the use is illegal for either
--      choice).
--
--      Qualification of enumeration literals occurs regularly in order to
--      resolve overloading issues. Using an incorrect subtype to do that seems
--      to be a likely error. (Using a type conversion rather than
--      qualification to do that is also a likely error.) We test the other
--      cases for completeness.

-- CHANGE HISTORY:
--        25 Mar 22   RLB     Created test from suggestion of Jeff Cousins.
--!
package B490004 is

   pragma Assertion_Policy (Ignore);
   
   type Colors is (White, Yellow, Orange, Red,
                   Green, Blue, Indigo, Purple, Black);
   
   subtype Primary_Colors is Colors
       with Static_Predicate => Primary_Colors in Yellow | Red | Blue;
   
   subtype Secondary_Colors is Colors
       with Static_Predicate => Secondary_Colors in Orange | Green | Purple;
       
   subtype Small is Natural range 0 .. 10;
   
   subtype Odd is Small
       with Static_Predicate => Odd in 1 | 3 | 5 | 7 | 9;
       
   subtype Prime is Small
       with Static_Predicate => Prime in 2 | 3 | 5 | 7;
       
   Debug_Cnt : constant := 0;                            -- OK. {4;1}
   
   Max : constant := Odd'(10);                           -- ERROR: {4;1}
   
   PNine : constant Natural := Prime(9);                 -- ERROR: {4;1}
   
   Clear : constant Colors := Primary_Colors'(White);    -- ERROR: {4;1}
   
   Dark : constant Colors := Secondary_Colors(Black);    -- ERROR: {4;1}
   
   type Tiny is range 0 .. Odd(Debug_Cnt);               -- ERROR: {4;1}
   
   type Bigger is range 1 .. Prime'(10);                 -- ERROR: {4;1}
   
   PZero : constant Prime := 0;                          -- OK. {4;1}
      -- Note: AI12-0393-1 says that this constant is not static,
      -- but we do not depend upon that. Existing practice requires
      -- this declaration to be accepted.       
       
   type Foobar is range 0 .. 100 with Size => PZero;     -- ERROR: {39;1}
      -- The value must be static and nonnegative. Depending on whether
      -- AI12-0393-1 is followed, one of these is false.

   Night : constant Primary_Colors := Black;             -- OK. {4;1}
      -- See the note under PZero.

   type Rec (D : Primary_Colors) is record
       case D is
           when Yellow | Red | Blue =>
               Bright : Natural;
           when Night =>                                 -- ERROR: {12}
               -- The value must be static and satisfy Primary_Colors.
               -- Depending on whether AI12-0393-1 is followed, one of these
               -- is false.
               Dim : Boolean;
        end case;
   end record;

   Very_Odd : constant Odd := 8;                         -- OK. {4;1}
   
   Rather_Odd : constant := Odd'(Very_Odd);              -- ERROR: {4;1}
       -- The expression here must be static. If it is treated as static, it
       -- still is illegal as it fails a predicate check; if AI12-0393-1 is
       -- followed it is illegal for not being static.
   
   -- Can't test the following as AI12-0393-1 does not allow it:
   --Really_Odd : constant := Very_Odd;                  -- ERROR: {4;1}
       -- AI12-0393-1 says Very_Odd is non-static. But if the compiler chose
       -- to treat it as static, then it would be OK. AI12-0393-1 requested
       -- that such cases not be tested.
   
end B490004;
