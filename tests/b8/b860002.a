-- B860002.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
-- OBJECTIVE:
--      Check that access type implicit conversion works as expected.
--
-- TEST DESCRIPTION:
--      This is based on the !example in AI05-0149 (with corrections).
--
--      Note that Ada doesn't have anything explicitly named "implicit
--      conversion". Ada simply says that a pair of different types
--      successfully resolve in some cases, and these cases imply that
--      given the usual model in Ada that two types are different, some
--      sort of conversion is happening automatically. The rules tested
--      here are 8.6(26/2) and 8.6(26.1/3).
--
-- CHANGE HISTORY:
--      05 Mar 20   JAC     Initial pre-release version.
--      17 Mar 20   RLB     Readied for release - renamed, improved error
--                          markers, added additional descriptive test.
--      19 Mar 20   RLB     Corrected Class_Acc type definition.
--
--!
procedure B860002 is

   type T is tagged record
      X : Integer;
   end record;
   type Acc is access all T;
   type Class_Acc is access all T'Class;
   type Rec is record
      Comp : access T'Class;
   end record;
   My_Rec : Rec;

   procedure P(X : access T) is
      Y : Acc;
      Z : Class_Acc;
   begin
      Y := X;                          -- ERROR: {7;1}
         -- Illegal implicit conversion, X is an access parameter.
      Y := Acc(X);                     -- OK. {7;1}
         -- Might raise Program_Error
      if X in Acc then
         Y := Acc(X);  -- Known to be safe now
      else
         Y := null;
      end if;
      My_Rec.Comp := Y;                -- OK. {7;1}
          -- Implicit conversion legal in Ada 2005 and Ada 2012. 8.6(26/2)
      Z := My_Rec.Comp;                -- OK. {7;1}
          -- Implicit conversion legal in Ada 2012, but not in
          -- Ada 2005. 8.6(26.1/3)
      Y := My_Rec.Comp;                -- ERROR: {7;1}
          -- Illegal implicit conversion (T does not cover T'Class).
   end P;

begin

   null;

end B860002;
