-- B611004.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--
--*
--
-- OBJECTIVE:
--
--     Check that Pre'Class and Post'Class cannot be specified on a subprogram
--     body that is acting as a completion.
--
-- TEST DESCRIPTION:
--     To test the objective, we check that Pre'Class and Post'Class cannot be
--     specified on subprogram bodies that are completing a subprogram
--     specification. But note that Pre'Class and Post'Class are allowed only
--     on primitive subprograms, and subprogram bodies are almost never
--     primitive. So even non-completing subprogram bodies cannot specify
--     Pre'Class or Post'Class. We've msrked cases that are illegal only
--     because they are not primitive with "Non-prim"; other test cases
--     test the objective (but also may be illegal by being non-primitive).
--
--     It is possible to have a subprogram body that is primitive and not
--     acting as a completion: it would have to override an inherited
--     primitive subprogram. So it would be possible to test a legal case;
--     however, such overriding is unlikely, especially as only one such
--     overriding is possible per type (since a body freezes the type).
--     This case is too unlikely to test.
--
--     We retain all of the non-primitive, non-completion bodies as this is
--     the only test that tries Pre'Class or Post'Class on subprogram bodies,
--     and it is worth verifying that those are rejected.
--
-- CHANGE HISTORY:
--     04 Feb 2016   RLB   Created test.
--     28 Mar 2016   RLB   Added error location codes.
--     23 Sep 2022   RLB   Corrected test to mark all of the bodies as illegal.
--
--!
package B611004P is

    type Root is tagged private;

    function Is_OK (P : in Root) return Boolean;

    procedure OK (P : in out Root)
       with Pre'Class => Is_OK (P), Post'Class => Is_OK (P);   -- OK. {14;1}

    procedure Spec1 (P : in out Root);

    procedure Spec2 (P : in out Root);

    function Spec4 (P : Root) return Root;

    procedure Spec5 (P : in out Root);

    procedure Spec6 (P : in out Root);

    function Spec8 (P : Root) return Root;

    procedure Spec9 (P : in out Root);

    procedure SpecA (P : in out Root);

private

    type Root is tagged record
       N : Natural := 0;
    end record;

    function Is_OK (P : in Root) return Boolean is (P.N mod 2 = 0);

end B611004P;


package body B611004P is

    procedure OK (P : in out Root) is
    begin
       P.N := P.N + 12;
    end OK;

    procedure No_Spec1 (P : in out Root)
       with Pre'Class => Is_OK (P) is               -- ERROR: (Non-Prim) {13;3}
    begin
       P.N := P.N * 2;
    end No_Spec1;

    procedure Spec1 (P : in out Root)
       with Pre'Class => Is_OK (P) is               -- ERROR: {13;3}
    begin
       P.N := P.N + 2;
    end Spec1;

    procedure Spec2 (P : in out Root) is separate
       with Pre'Class => Is_OK (P);                 -- ERROR: {13;3}

    procedure Spec3 (P : in out Root);

    procedure Spec3 (P : in out Root)
       with Pre'Class => Is_OK (P) is               -- ERROR: {13;3}
    begin
       P.N := P.N * 2;
    end Spec3;

    function No_Spec4 (P : Root) return Root is (N => P.N * 2)
       with Pre'Class => Is_OK (P);                 -- ERROR: (Non-prim) {13;1}

    function Spec4 (P : Root) return Root is (N => P.N + 2)
       with Pre'Class => Is_OK (P);                 -- ERROR: {13;1}


    procedure No_Spec5 (P : in out Root)
       with Post'Class => Is_OK (P) is              -- ERROR: (Non-prim) {13;3}
    begin
       P.N := P.N + 2;
    end No_Spec5;

    procedure Spec5 (P : in out Root)
       with Post'Class => Is_OK (P) is              -- ERROR: {13;3}
    begin
       P.N := P.N + 2;
    end Spec5;

    procedure Spec6 (P : in out Root) is separate
       with Post'Class => Is_OK (P);                -- ERROR: {13;1}

    procedure Spec7 (P : in out Root);

    procedure Spec7 (P : in out Root)
       with Post'Class => Is_OK (P) is              -- ERROR: {13;3}
    begin
       P.N := P.N + 2;
    end Spec7;

    function No_Spec8 (P : Root) return Root is (N => P.N + 2)
       with Post'Class => Is_OK (P);                -- ERROR: (Non-Prim) {13;1}

    function Spec8 (P : Root) return Root is (N => P.N + 2)
       with Post'Class => Is_OK (P);                -- ERROR: {13;1}


    procedure No_Spec9 (P : in out Root) is null
       with Pre'Class => Is_OK (P);                 -- ERROR: (Non-Prim) {13;1}

    procedure Spec9 (P : in out Root) is null
       with Pre'Class => Is_OK (P);                 -- ERROR: {13;1}

    procedure SpecA (P : in out Root) is null
       with Post'Class => Is_OK (P);                -- ERROR: {13;1}

end B611004P;


-- Note: The following are provided for completeness. Processing these units
-- is not required.

separate (B611004P)
procedure Spec2 (P : in out Root) is                    -- OPTIONAL ERROR: {1}
begin
    P.N := P.N + 4;
end Spec2;

separate (B611004P)
procedure Spec6 (P : in out Root) is                    -- OPTIONAL ERROR: {1}
begin
    P.N := P.N + 52;
end Spec6;

with B611004P;
procedure B611004 is
    Var : B611004P.Root;
begin
    B611004P.Spec1 (Var);
end B611004;
